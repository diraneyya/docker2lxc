#!/usr/bin/env bash

function docker2lxc() {
  if ps -o comm= $PPID | grep -q sshd; then SSH=1; fi
  if ! [ -p '/proc/$$/fd/1' ]; then INTERACTIVE=1; else
    if [ $1 != '--internal-call']; then
      echo "$(declare -f docker2lxc); docker2lxc --internal-call"
    fi
  fi 

  QUALIFIER=${SSH:+remote}
  QUALIFIER=${TEMP:-local}

  if ! command -v dockerr &>/dev/null; then
    printf >&2 "\e[31m%s\e[0m\n" \
      "Docker not found on $QUALIFIER machine, aborting..."
    return 1
  fi

  return 0

  if [ -n "$1" ]; then 
    if ! docker image inspect $1 >/dev/null 2>&1; then
      if [ -n INTERACTIVE ]; then
        printf >&2 "\e[33m%s %s\e[4m%s\e[24m%s [Y/n] \e[0m" \
          "Docker image '$1' not found${SSH:+ on the remote}, do you want" \
          "to try to pull it using '" "docker pull $1" "'?" 
        read answer
        echo

        case "$answer" in
          [Nn]*)
            return 0
            ;;
          *)
            if ! docker pull "$1"; then return 1; fi            
            # Your code for "yes" goes here
            ;;
        esac
      else
        printf >&2 "\e[31;1m%s \e[4m%s\e[24m %s.\e[0m\n" \
          "Docker image not found on ${QUALIFIER} machine. Use 'docker pull" \
          "$1" "' ${QUALIFIER}ly prior to calling ${0##*/}${SSH:+ on the remote}." 
        return 1
      fi
    fi
  fi

  return 0

  if [ -z "$1" -z "$PIPED" && -z "$1" ]; then
    printf >&2 "\e[34;2;1m%s:\e[22m %s \e[2;33;4m%s\e[24m \e[4m%s\e[0m\n" \
      "Regular Usage" "docker2lxc" "<image>" "<template.tar.gz>"
    return 0
  fi

  if [ -n "$PIPED" && -z "$1" ]; then
    printf >&2 "\e[34;2;1m%s:\e[22m %s \e[2;33;4m%s\e[24m \e[4m%s\e[0m\n" \
      "Regular Usage" "docker2lxc" "<image>" "<template.tar.gz>"
    return 0
  fi

  # Extend to building Dockerfiles in the future using <image|Dockerfile>
  # if [ -f "$1" ]; then
  #   echo "found Dockerfile"
  #   exit 1
  # fi

  echo >&2 -e "\e[33m-> Pulling Docker container '$1'...\e[0m"
  docker pull $1 >&2
  if [[ $? -ne 0 ]]; then 
    echo >&2 "\e[31m  Container '$1' not found, aborting\e[0m"
    return 2
  fi
  docker_container=$(docker run --rm --entrypoint sh -id $1)
  if [[ $? -ne 0 ]]; then 
    echo >&2 "\e[31m  Incompatible container '$1' detected, aborting\e[0m"
    return 3
  fi
  docker_container=${docker_container:0:12}
  if [ -z "$SSH" ]; then
    output_file=${2:-template}
    output_file=${output_file%.tar.gz}.tar.gz
  fi
  # test -z "$SSH" && \
  echo >&2 -e "\e[33m-> Exporting root filesystem to '${output_file:-stdout}'...\e[0m"
  if [ -z "$output_file" ]; then
    docker export $docker_container | gzip >&1
  else 
    docker export $docker_container | gzip > $output_file
  fi
  # test -z "$SSH" && \
  echo >&2 -e "\e[33m-> Killing running container...\e[0m"
  docker kill $docker_container >/dev/null
  # test -z "$SSH" && \
  echo >&2 -e "\e[32;1mDone\e[0m"
}

docker2lxc $*